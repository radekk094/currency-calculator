{"version":3,"sources":["layouts/Header.js","layouts/Navigation.js","components/CurrencyTable.js","components/CurrencyCalculator.js","pages/CurrencyRates.js","pages/ArchiveCurrencyRates.js","components/CurrencyHistoryTable.js","pages/HistoryCurrencyRate.js","pages/ErrorPage.js","layouts/Page.js","layouts/Footer.js","layouts/App.js","index.js"],"names":["withRouter","react_default","a","createElement","Fragment","react_router","path","exact","render","list","name","icon","Navigation","menu","map","item","key","react_router_dom","to","className","CurrencyTable","props","sortedCurrencies","beforeSort","publicationDate","downloadDate","refreshButtonClick","tableCategory","currenciesTable","currency","code","mid","toFixed","onClick","CurrencyCalculator","state","currency1","currency2","moneyAmount","result","handleChange","e","_this","setState","Object","defineProperty","target","value","handleSubmit","preventDefault","alert","countCurrencies","currencyRate1","currencyRate2","forEach","currencyOptions","this","_this$state","onSubmit","onChange","type","concat","parseFloat","Component","CurrencyRates","currencies","selectedCurrencies","handleDataFetch","fetch","then","response","ok","Error","status","json","data","rates","Date","effectiveDate","toLocaleDateString","toLocaleString","catch","error","console","log","sortCurrencies","push","selectedCurrency","handleRefreshClick","components_CurrencyCalculator","components_CurrencyTable","ArchiveCurrencyRates","afterDownload","selectedDate","apiWebsite","handleDataChange","dateScope","maxDate","minDate","setDate","getDate","setDateFormat","dateToFormat","days","month","getMonth","year","getFullYear","min","max","CurrencyHistoryTable","currencyCode","currencyHistory","HistoryCurrencyRate","selectedDateFrom","selectedDateTo","_this$setState","dateFrom","getTime","components_CurrencyHistoryTable","ErrorPage","Page","component","Footer","App","basename","process","layouts_Navigation","layouts_Header","layouts_Page","layouts_Footer","ReactDOM","layouts_App","document","getElementById"],"mappings":"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","file":"static/js/main.3b851fda.chunk.js","sourcesContent":["import React from 'react';\nimport { Route, Switch } from 'react-router-dom';\nimport { withRouter } from 'react-router-dom';\nimport '../styles/Header.css';\n\nconst Header = () => {\n    return (\n        <>\n            <Switch>\n                <Route path=\"/\" exact render={() => (\n                    <h1>Sprawdź aktualne kursy walut i przelicz kwotę</h1>\n                )} />\n                <Route path=\"/archive\" render={() => (\n                    <h1>Sprawdź archiwalne kursy walut i przelicz kwotę</h1>\n                )} />\n                <Route path=\"/history\" render={() => (\n                    <h1>Wyświetl historię zmian kursu wybranej waluty</h1>\n                )} />\n                <Route render={() => (\n                    <h1>Strona nie istnieje</h1>\n                )} />\n            </Switch>\n        </>\n    );\n}\n\nexport default withRouter(Header);","import React from 'react';\nimport { NavLink } from 'react-router-dom';\nimport '../styles/Navigation.css';\n\nconst list = [\n    { name: \"Waluty - aktualne\", icon: \"fas fa-coins\", path: \"/\", exact: true },\n    { name: \"Waluty - archiwum\", icon: \"far fa-calendar-alt\", path: \"/archive\" },\n    { name: \"Waluty - historia\", icon: \"fas fa-chart-line\", path: \"/history\" }\n]\n\nconst Navigation = () => {\n    const menu = list.map((item) => (\n        <li key={item.name}>\n            <NavLink to={item.path} exact={item.exact ? item.exact : false}><i className={item.icon}></i><span>{item.name}</span></NavLink>\n        </li>\n    ));\n\n    return (\n        <nav>\n            <ul>\n                {menu}\n            </ul>\n        </nav>\n    );\n}\n\nexport default Navigation;","import React from 'react';\n\nconst CurrencyTable = (props) => {\n    const { sortedCurrencies, beforeSort, publicationDate, downloadDate, refreshButtonClick, tableCategory } = props;\n\n    // table rows with currencies data\n    const currenciesTable = sortedCurrencies.map(currency => (\n        (currency.code === \"PLN\") ? null : (\n            <tr key={currency.code}>\n                <td>{currency.code}</td>\n                <td>{currency.currency}</td>\n                <td>{currency.mid.toFixed(4)}</td>\n            </tr>\n        )\n    ));\n\n    // displaying some information and table with currencies data\n    const result = beforeSort ? ((tableCategory === \"Archiwalne\") ? (\n        <>\n            <h2>Wybierz datę i kliknij przycisk.</h2>\n            <h3>Dostępne są dane z ostatnich 5 lat.</h3>\n        </>\n    ) : (<h2>Wczytywanie danych...</h2>)) : (\n            <>\n                <h2>{tableCategory} kursy walut</h2>\n                <h3>Data opublikowania danych na stronie NBP: {publicationDate}</h3>\n                <h3>Data i godzina pobrania danych: {downloadDate}</h3>\n                {(tableCategory === \"Aktualne\") ? <button onClick={refreshButtonClick}>Odśwież dane</button> : null}\n                <table>\n                    <tbody>\n                        <tr>\n                            <td>Kod waluty</td>\n                            <td>Nazwa waluty</td>\n                            <td>{(tableCategory === \"Aktualne\") ? \"Aktualny kurs\" : \"Wartość kursu\"}</td>\n                        </tr>\n                        {currenciesTable}\n                    </tbody>\n                </table>\n            </>\n        );\n\n    return (\n        result\n    );\n}\n\nexport default CurrencyTable;","import React, { Component } from 'react';\n\nclass CurrencyCalculator extends Component {\n    state = {\n        currency1: \"EUR\", // first currency to calculation\n        currency2: \"PLN\", // second currency to calculation\n        moneyAmount: \"\", // money amount to calculation\n        result: \"\" // result of the calculation\n    }\n\n    // method, which changes the state with data from the form and resets result of the calculation (because after changing data, App shouldn't show the result)\n    handleChange = (e) => {\n        this.setState({\n            result: \"\",\n            [e.target.name]: e.target.value\n        });\n    }\n\n    // method, which checks if user has completed data in the form and if yes - it calls method to calculate the result\n    handleSubmit = (e) => {\n        e.preventDefault();\n        if (!this.state.moneyAmount) {\n            return alert(\"Wprowadź kwotę.\");\n        }\n        this.countCurrencies(this.state.currency1, this.state.currency2);\n    }\n\n    // method, which calculates the result\n    countCurrencies = (currency1, currency2) => {\n        let currencyRate1;\n        let currencyRate2;\n\n        if (currency1 === currency2) {\n            this.setState({\n                result: this.state.moneyAmount\n            });\n        } else {\n            this.props.sortedCurrencies.forEach(currency => {\n                if (currency.code === currency1) {\n                    currencyRate1 = currency.mid;\n                    return;\n                } else if (currency.code === currency2) {\n                    currencyRate2 = currency.mid;\n                    return;\n                }\n            });\n\n            this.setState({\n                result: ((currencyRate1 / currencyRate2) * this.state.moneyAmount)\n            });\n        }\n    }\n\n    // rendering the component in two parts - form with data to calculate and the result of the calculation\n    render() {\n        const currencyOptions = this.props.sortedCurrencies.map(currency => (\n            <option key={currency.code}>{currency.code}</option>\n        ));\n\n        const { currency1, currency2, moneyAmount, result } = this.state;\n\n        return (\n            <section>\n                <h2>Kalkulator walut</h2>\n                <form onSubmit={this.handleSubmit}>\n                    Waluta, którą chcesz wpłacić:&nbsp;\n                    <select name=\"currency1\" value={currency1} onChange={this.handleChange}>\n                        {currencyOptions}\n                    </select><br />\n                    Waluta, którą chcesz otrzymać:&nbsp;\n                    <select name=\"currency2\" value={currency2} onChange={this.handleChange}>\n                        {currencyOptions}\n                    </select><br />\n                    Kwota do przeliczenia:&nbsp;\n                    <input name=\"moneyAmount\" type=\"number\" value={moneyAmount} onChange={this.handleChange} /><br />\n                    <button>Oblicz</button>\n                </form>\n                <h3>{result ? (`${parseFloat(moneyAmount).toFixed(2)} ${currency1} = ${parseFloat(result).toFixed(2)} ${currency2}`) : <br />}</h3>\n            </section>\n        );\n    }\n}\n\nexport default CurrencyCalculator;","import React, { Component } from 'react';\nimport CurrencyTable from '../components/CurrencyTable';\nimport CurrencyCalculator from '../components/CurrencyCalculator';\n\nclass CurrencyRates extends Component {\n    state = {\n        currencies: [], // array with all currencies from the API url\n        sortedCurrencies: [], // array with currencies selected to App\n        beforeSort: true, // is App before selecting currencies?\n        publicationDate: \"\", // date of publication data on NBP website\n        downloadDate: \"\" // date of downloading data from API url\n    }\n\n    // array with codes of currencies, which was selected to display in the App\n    selectedCurrencies = [\n        \"EUR\", \"USD\", \"GBP\", \"CHF\", \"CZK\", \"AUD\", \"CAD\", \"DKK\", \"NOK\", \"SEK\", \"BGN\", \"JPY\", \"TRY\"\n    ]\n\n    // method to download data from API url\n    handleDataFetch = () => {\n        const apiWebsite = \"https://api.nbp.pl/api/exchangerates/tables/a?format=json\";\n\n        fetch(apiWebsite)\n            .then(response => {\n                if (response.ok) {\n                    return response;\n                }\n                throw Error(response.status);\n            })\n            .then(response => response.json())\n            .then(data => {\n                const currencies = data[0].rates;\n                const publicationDate = new Date(data[0].effectiveDate)\n                const downloadDate = new Date();\n                this.setState({\n                    currencies,\n                    beforeSort: true,\n                    publicationDate: publicationDate.toLocaleDateString(),\n                    downloadDate: downloadDate.toLocaleString()\n                });\n            })\n            .catch(error => console.log(error));\n    }\n\n    // method to select only some currencies from downloaded data (including only selectedCurrencies array)\n    sortCurrencies = () => {\n        const sortedCurrencies = [];\n        const plCurrency = {\n            currency: \"polski złoty\",\n            code: \"PLN\",\n            mid: 1\n        };\n        sortedCurrencies.push(plCurrency);\n        this.selectedCurrencies.forEach(selectedCurrency => {\n            this.state.currencies.forEach(currency => {\n                if (currency.code === selectedCurrency) {\n                    sortedCurrencies.push(currency);\n                };\n            });\n        });\n        this.setState({\n            sortedCurrencies,\n            beforeSort: false\n        });\n    }\n\n    // method to handle refresh button (re-downloading data)\n    handleRefreshClick = () => {\n        this.handleDataFetch();\n    }\n\n    // method to download first time data from the API url, after first rendering of the component\n    componentDidMount() {\n        this.handleDataFetch();\n    }\n\n    // method, which checks after rendering, if the App has already selected currencies, included in selectedCurrencies array - if not, it calls a method sortCurrencies, which do it\n    componentDidUpdate() {\n        if (this.state.beforeSort) {\n            this.sortCurrencies();\n        }\n    }\n\n    // rendering the component with two parts - table with data from the API url and currency calculator\n    render() {\n        const { sortedCurrencies, beforeSort, publicationDate, downloadDate } = this.state;\n\n        return (\n            <>\n                {beforeSort ? null : (\n                    <CurrencyCalculator\n                        sortedCurrencies={sortedCurrencies}\n                        tableCategory=\"Aktualne\"\n                    />\n                )}\n                <CurrencyTable\n                    sortedCurrencies={sortedCurrencies}\n                    beforeSort={beforeSort}\n                    publicationDate={publicationDate}\n                    downloadDate={downloadDate}\n                    refreshButtonClick={this.handleRefreshClick}\n                    tableCategory=\"Aktualne\"\n                />\n            </>\n        );\n    }\n}\n\nexport default CurrencyRates;","import React, { Component } from 'react';\nimport CurrencyTable from '../components/CurrencyTable';\nimport CurrencyCalculator from '../components/CurrencyCalculator';\n\nclass ArchiveCurrencyRates extends Component {\n    state = {\n        currencies: [], // array with all currencies from the API url\n        sortedCurrencies: [], // array with currencies selected to App\n        beforeSort: true, // is App before selecting currencies?\n        afterDownload: false, // is App after downloading data from API url?\n        selectedDate: \"\", // date selected in form\n        publicationDate: \"\", // date selected in form (but in a different format)\n        downloadDate: \"\" // date of downloading data from API url\n    }\n\n    // array with codes of currencies, which was selected to display in the App\n    selectedCurrencies = [\n        \"EUR\", \"USD\", \"GBP\", \"CHF\", \"CZK\", \"AUD\", \"CAD\", \"DKK\", \"NOK\", \"SEK\", \"BGN\", \"JPY\", \"TRY\"\n    ]\n\n    // method to download data from API url\n    handleDataFetch = () => {\n        const apiWebsite = `https://api.nbp.pl/api/exchangerates/tables/a/${this.state.selectedDate}?format=json`;\n\n        fetch(apiWebsite)\n            .then(response => {\n                if (response.ok) {\n                    return response;\n                } else {\n                    alert(\"Brak danych dla wybranej daty. Wybierz inną datę.\");\n                }\n                throw Error(response.status);\n            })\n            .then(response => response.json())\n            .then(data => {\n                const currencies = data[0].rates;\n                const publicationDate = new Date(this.state.selectedDate)\n                const downloadDate = new Date();\n                this.setState({\n                    currencies,\n                    publicationDate: publicationDate.toLocaleDateString(),\n                    downloadDate: downloadDate.toLocaleString(),\n                    afterDownload: true\n                });\n            })\n            .catch(error => console.log(error));\n    }\n\n    // method to select only some currencies from downloaded data (including only selectedCurrencies array)\n    sortCurrencies = () => {\n        const sortedCurrencies = [];\n        const plCurrency = {\n            currency: \"polski złoty\",\n            code: \"PLN\",\n            mid: 1\n        }\n        sortedCurrencies.push(plCurrency);\n        this.selectedCurrencies.forEach(selectedCurrency => {\n            this.state.currencies.forEach(currency => {\n                if (currency.code === selectedCurrency) {\n                    sortedCurrencies.push(currency);\n                };\n            });\n        });\n        this.setState({\n            sortedCurrencies,\n            beforeSort: false\n        });\n    }\n\n    // method, which changes the state with data from the form and resets boolean variables from the state (because after changing data, App shouldn't show the table before click in form submit)\n    handleDataChange = (e) => {\n        this.setState({\n            selectedDate: e.target.value,\n            beforeSort: true,\n            afterDownload: false\n        });\n    }\n\n    // method, which checks if user has selected date in the form and if yes - it calls method handleDataFetch to download data from the API url\n    handleSubmit = (e) => {\n        e.preventDefault();\n        if (!this.state.selectedDate) {\n            return alert(\"Wybierz datę.\");\n        }\n        this.handleDataFetch();\n    }\n\n    // method to set min and max date in the form\n    dateScope = () => {\n        const maxDate = new Date();\n        let minDate = new Date();\n        minDate.setDate(maxDate.getDate() - (365 * 5));\n        return ([this.setDateFormat(minDate), this.setDateFormat(maxDate)]);\n    }\n\n    // method to format min and max date to the form\n    setDateFormat = (dateToFormat) => {\n        const days = dateToFormat.getDate();\n        const month = (dateToFormat.getMonth() + 1);\n        const year = dateToFormat.getFullYear();\n        return `${year}-${(month <= 9) ? (\"0\" + month) : month}-${(days <= 9) ? (\"0\" + days) : days}`;\n    }\n\n    // method, which checks after rendering, if the App has already downloaded data and selected currencies, included in selectedCurrencies array - if not, it calls a method sortCurrencies, which do it\n    componentDidUpdate() {\n        if (this.state.afterDownload && this.state.beforeSort) {\n            this.sortCurrencies();\n        }\n    }\n\n    // rendering the component with three parts - form with datepicker, table with data from the API url and currency calculator\n    render() {\n        const { sortedCurrencies, beforeSort, publicationDate, downloadDate, selectedDate } = this.state;\n\n        return (\n            <>\n                <form onSubmit={this.handleSubmit}>\n                    Data:&nbsp;\n                    <input\n                        type=\"date\"\n                        min={this.dateScope()[0]}\n                        max={this.dateScope()[1]}\n                        value={selectedDate}\n                        onChange={this.handleDataChange}\n                    />\n                    <button>Wyszukaj dane</button>\n                </form>\n                {beforeSort ? null : (\n                    <CurrencyCalculator\n                        sortedCurrencies={sortedCurrencies}\n                        tableCategory=\"Archiwalne\"\n                    />\n                )}\n                <CurrencyTable\n                    sortedCurrencies={sortedCurrencies}\n                    beforeSort={beforeSort}\n                    publicationDate={publicationDate}\n                    downloadDate={downloadDate}\n                    tableCategory=\"Archiwalne\"\n                />\n            </>\n        );\n    }\n}\n\nexport default ArchiveCurrencyRates;","import React from 'react';\n\nconst CurrencyHistoryTable = (props) => {\n    const { currencyCode, downloadDate, currencyHistory } = props;\n\n    // table rows with currency history data\n    const currenciesTable = currencyHistory.map(currency => (\n        <tr key={currency.effectiveDate}>\n            <td>{currency.effectiveDate}</td>\n            <td>{currency.mid.toFixed(4)}</td>\n        </tr>\n    ));\n\n    return (\n        <>\n            <h2>Historia zmian kursu waluty {currencyCode}</h2>\n            <h3>Data i godzina pobrania danych: {downloadDate}</h3>\n            <table>\n                <tbody>\n                    <tr>\n                        <td>Data</td>\n                        <td>Wartość kursu</td>\n                    </tr>\n                    {currenciesTable}\n                </tbody>\n            </table>\n        </>\n    );\n}\n\nexport default CurrencyHistoryTable;","import React, { Component } from 'react';\nimport CurrencyHistoryTable from '../components/CurrencyHistoryTable';\n\nclass HistoryCurrencyRate extends Component {\n    state = {\n        selectedCurrency: \"EUR\", // currency, selected to download data\n        selectedDateFrom: \"\", // date from in the date range\n        selectedDateTo: \"\", // date to in the date range\n        downloadDate: \"\", // date of downloading data from API url\n        currencyHistory: [], // array with the currency history\n        afterDownload: false // is App after downloading data from API url?\n    }\n\n    // array with codes of currencies, which was selected to display in the App\n    selectedCurrencies = [\n        \"EUR\", \"USD\", \"GBP\", \"CHF\", \"CZK\", \"AUD\", \"CAD\", \"DKK\", \"NOK\", \"SEK\", \"BGN\", \"JPY\", \"TRY\"\n    ]\n\n    // method to download data from API url\n    handleDataFetch = () => {\n        const apiWebsite = `https://api.nbp.pl/api/exchangerates/rates/a/${this.state.selectedCurrency}/${this.state.selectedDateFrom}/${this.state.selectedDateTo}?format=json`;\n\n        fetch(apiWebsite)\n            .then(response => {\n                if (response.ok) {\n                    return response;\n                }\n                throw Error(response.status);\n            })\n            .then(response => response.json())\n            .then(data => {\n                const currencyHistory = data.rates;\n                const downloadDate = new Date();\n                this.setState({\n                    currencyHistory,\n                    downloadDate: downloadDate.toLocaleString(),\n                    afterDownload: true\n                });\n            })\n            .catch(error => console.log(error));\n    }\n\n    // method, which changes the state with data from the form and resets boolean variable from the state (because after changing data, App shouldn't show the table before click in form submit)\n    handleDataChange = (e) => {\n        this.setState({\n            [e.target.name]: e.target.value,\n            afterDownload: false\n        });\n    }\n\n    // method, which checks if date range is correct and if yes - it calls method handleDataFetch to download data from the API url\n    handleSubmit = (e) => {\n        e.preventDefault();\n        let dateFrom = new Date(this.state.selectedDateFrom);\n        let dateTo = new Date(this.state.selectedDateTo);\n        if ((((dateTo.getTime() - dateFrom.getTime()) / (1000 * 60 * 60 * 24)) + 1) > 366) {\n            return alert(\"Jednorazowo możesz wybrać zakres max 366 dni.\");\n        }\n        this.handleDataFetch();\n    }\n\n    // method to set min and max date in the form\n    dateScope = () => {\n        const maxDate = new Date();\n        let minDate = new Date();\n        minDate.setDate(maxDate.getDate() - (365 * 5));\n        return ([this.setDateFormat(minDate), this.setDateFormat(maxDate)]);\n    }\n\n    // method to format min and max date to the form\n    setDateFormat = (dateToFormat) => {\n        const days = dateToFormat.getDate();\n        const month = (dateToFormat.getMonth() + 1);\n        const year = dateToFormat.getFullYear();\n        return `${year}-${(month <= 9) ? (\"0\" + month) : month}-${(days <= 9) ? (\"0\" + days) : days}`;\n    }\n\n    // rendering the component with two parts - form with datepicker and currency to select and table with data from the API url\n    render() {\n        const { selectedCurrency, selectedDateFrom, selectedDateTo, downloadDate, currencyHistory, afterDownload } = this.state;\n        const currencyOptions = this.selectedCurrencies.map(currency => (\n            <option key={currency}>{currency}</option>\n        ));\n\n        return (\n            <>\n                <form onSubmit={this.handleSubmit}>\n                    Waluta:&nbsp;\n                    <select name=\"selectedCurrency\" value={selectedCurrency} onChange={this.handleDataChange}>\n                        {currencyOptions}\n                    </select><br />\n                    Data od:&nbsp;\n                    <input\n                        name=\"selectedDateFrom\"\n                        type=\"date\"\n                        min={this.dateScope()[0]}\n                        max={this.dateScope()[1]}\n                        value={selectedDateFrom}\n                        onChange={this.handleDataChange}\n                    /><br />\n                    Data do:&nbsp;\n                    <input\n                        name=\"selectedDateTo\"\n                        type=\"date\"\n                        min={this.dateScope()[0]}\n                        max={this.dateScope()[1]}\n                        value={selectedDateTo}\n                        onChange={this.handleDataChange}\n                    />\n                    <button>Wyszukaj dane</button>\n                </form>\n                {afterDownload ? (\n                    <CurrencyHistoryTable\n                        currencyCode={selectedCurrency}\n                        downloadDate={downloadDate}\n                        currencyHistory={currencyHistory}\n                    />\n                ) : (\n                        <>\n                            <h2>Wybierz walutę i zakres dat, a następnie kliknij przycisk.</h2>\n                            <h3>Dostępne są dane z ostatnich 5 lat.</h3>\n                            <h3>Uwaga! Jednorazowo możesz wybrać zakres max 366 dni.</h3>\n                        </>\n                    )\n                }\n            </>\n        );\n    }\n}\n\nexport default HistoryCurrencyRate;","import React from 'react';\n\nconst ErrorPage = () => {\n    return (\n        <h2>Błąd wczytywania strony - sprawdź poprawność adresu.</h2>\n    );\n}\n\nexport default ErrorPage;","import React from 'react';\nimport { Route, Switch } from 'react-router-dom';\nimport CurrencyRates from '../pages/CurrencyRates';\nimport ArchiveCurrencyRates from '../pages/ArchiveCurrencyRates';\nimport HistoryCurrencyRate from '../pages/HistoryCurrencyRate';\nimport ErrorPage from '../pages/ErrorPage';\nimport '../styles/Page.css';\n\nconst Page = () => {\n    return (\n        <Switch>\n            <Route path=\"/\" exact component={CurrencyRates} />\n            <Route path=\"/archive\" component={ArchiveCurrencyRates} />\n            <Route path=\"/history\" component={HistoryCurrencyRate} />\n            <Route component={ErrorPage} />\n        </Switch>\n    );\n}\n\nexport default Page;","import React from 'react';\nimport '../styles/Footer.css';\n\nconst Footer = () => {\n    return (\n        <>\n            <p>&copy; 2019, created by <span>Radosław Kołodziejczyk</span></p>\n        </>\n    );\n}\n\nexport default Footer;","import React, { Component } from 'react';\nimport '../styles/App.css';\nimport { BrowserRouter as Router } from 'react-router-dom';\nimport Header from './Header';\nimport Navigation from './Navigation';\nimport Page from './Page';\nimport Footer from './Footer';\n\nclass App extends Component {\n  render() {\n    return (\n      <Router basename={process.env.PUBLIC_URL}>\n        <div className=\"app\">\n          <nav>\n            <Navigation />\n          </nav>\n          <header>\n            <Header />\n          </header>\n          <main>\n            <Page />\n          </main>\n          <footer>\n            <Footer />\n          </footer>\n        </div>\n      </Router>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/index.css';\nimport App from './layouts/App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}